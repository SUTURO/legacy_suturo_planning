(in-package :suturo-planning-pmd-knowledge)

(defvar *update-semantic-map-fails* 0)
(defvar *get-boxes-fails* 0)
(defvar *get-objects-fails* 0)
(defvar *determine-box-for-object-fails* 0)

(defmacro def-action-handler (name args &body body)
  (alexandria:with-gensyms (action-sym params)
    `(defmethod call-action ((,action-sym (eql ',name)) &rest ,params)
       (destructuring-bind ,args ,params ,@body))))

(def-action-handler update-semantic-map ()
  (if (= *update-semantic-map-fails* 1)
      (prog1 (vector 1 2 3)
        (setq *update-semantic-map-fails* 0))
      (prog1 nil
        (setq *update-semantic-map-fails* (+ *update-semantic-map-fails* 1)))))

(def-action-handler get-graspable-objects ()
  (setf *get-boxes-fails* *get-objects-fails*)
  (with-designators ((loc1 (location '((frame "frame1")
                                       (coords (1 2 3)))))
                     (loc2 (location '((frame "frame1")
                                       (coords (3 4 1))))))
    (with-designators ((obj1 (object `((name "obj1")
                                       (type graspable)
                                       (edible t)
                                       (at ,loc1))))
                       (obj2 (object `((name "obj2")
                                       (type graspable)
                                       (edible nil)
                                       (at ,loc2)))))
      (cond ((eql *get-objects-fails* 1)
             (incf *get-objects-fails*)
             `(,obj1 ,obj2))
            ((eql *get-objects-fails* 2)
             (setf *get-objects-fails* 0)
             `(,obj1 ,obj2 ,obj1))
            (t (incf *get-objects-fails*)
               nil)))))

(def-action-handler get-container-objects ()
  (with-designators ((loc1 (location '((frame "frame1")
                                       (coords (1 2 3)))))
                     (loc2 (location '((frame "frame1")
                                       (coords (3 4 1))))))
    (with-designators ((box1 (object `((name "box1")
                                       (type container)
                                       (at ,loc1)
                                       (use storage-for-stuff))))
                       (box2 (object `((name "box2")
                                       (type container)
                                       (at ,loc2)
                                       (use storage-for-food)))))
      (cond ((eql *get-boxes-fails* 1)
             (incf *get-boxes-fails*)
             `(,box1))
            ((eql *get-boxes-fails* 2)
             (setf *get-boxes-fails* 0)
             `(,box1 ,box2))
            (t (incf *get-boxes-fails*)
               nil)))))
      